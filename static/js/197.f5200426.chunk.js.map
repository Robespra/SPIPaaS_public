{"version":3,"sources":["App/components/Notifications.js","Demo/UIElements/Advance/Notification.js"],"names":["AlertMessage","appearance","children","transitionDuration","transitionState","onDismiss","animation","Ani","type","Fade","Flip","Rotate","Zoom","Bounce","Roll","LightSpeed","Jump","Flash","HeadShake","Jello","Pulse","RubberBand","Shake","Spin","Swing","Tada","Wobble","Slide","getAnimation","direction","left","right","top","bottom","when","Alert","variant","dismissible","onClose","Notifications","React","Component","render","components","Toast","placement","this","props","notification","add","onClick","message","autoDismiss","colourOptions","value","label","color","potionOption","animationOption","dot","alignItems","display","backgroundColor","borderRadius","content","marginRight","height","width","colourStyles","control","styles","option","data","isDisabled","isFocused","isSelected","chroma","alpha","css","contrast","cursor","input","placeholder","singleValue","AdvanceNotification","state","animationDirectionHandler","setState","handleChange","event","target","Row","Col","Card","Header","Title","as","Body","className","sm","md","Form","Group","controlId","Label","defaultValue","options","onChange","name","id","checked","htmlFor","prevState","Control","rows","Button"],"mappings":"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","file":"static/js/197.f5200426.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Alert} from 'react-bootstrap';\r\nimport { ToastProvider, ToastConsumer } from 'react-toast-notifications';\r\nimport {Fade, Flip, Rotate, Zoom, Bounce, Slide, Roll, LightSpeed} from 'react-reveal';\r\n\r\nimport Jump from 'react-reveal/Jump';\r\nimport Flash from 'react-reveal/Flash';\r\nimport HeadShake from 'react-reveal/HeadShake';\r\nimport Jello from 'react-reveal/Jello';\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport RubberBand from 'react-reveal/RubberBand';\r\nimport Shake from 'react-reveal/Shake';\r\nimport Spin from 'react-reveal/Spin';\r\nimport Swing from 'react-reveal/Swing';\r\nimport Tada from 'react-reveal/Tada';\r\nimport Wobble from 'react-reveal/Wobble';\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\n\r\nconst AlertMessage = ({appearance, children, transitionDuration, transitionState, onDismiss, animation}) => {\r\n    const Ani = getAnimation(animation.type);\r\n    const direction = animation.direction;\r\n    return (\r\n        <Ani\r\n            left={direction === 'left'}\r\n            right={direction === 'right'}\r\n            top={direction === 'top'}\r\n            bottom={direction === 'bottom'}\r\n            when={transitionState === 'entered'}\r\n        >\r\n            <Alert variant={appearance} dismissible onClose={onDismiss}>\r\n                {children}\r\n            </Alert>\r\n        </Ani>\r\n    );\r\n};\r\n\r\nfunction getAnimation(type) {\r\n    switch (type) {\r\n        case 'fade':\r\n            return Fade;\r\n        case 'flip':\r\n            return Flip;\r\n        case 'rotate':\r\n            return Rotate;\r\n        case 'zoom':\r\n            return Zoom;\r\n        case 'bounce':\r\n            return Bounce;\r\n        case 'roll':\r\n            return Roll;\r\n        case 'light-speed':\r\n            return LightSpeed;\r\n        case 'jump':\r\n            return Jump;\r\n        case 'flash':\r\n            return Flash;\r\n        case 'head-shake':\r\n            return HeadShake;\r\n        case 'jello':\r\n            return Jello;\r\n        case 'pulse':\r\n            return Pulse;\r\n        case 'rubber-band':\r\n            return RubberBand;\r\n        case 'shake':\r\n            return Shake;\r\n        case 'spin':\r\n            return Spin;\r\n        case 'swing':\r\n            return Swing;\r\n        case 'tada':\r\n            return Tada;\r\n        case 'wobble':\r\n            return Wobble;\r\n        default:\r\n            return Slide;\r\n    }\r\n}\r\n\r\nclass Notifications extends React.Component {\r\n    render(){\r\n            return (\r\n                <Aux>\r\n                    <ToastProvider components={{Toast: AlertMessage}} placement={this.props.notification.placement} animation={this.props.notification.animation}>\r\n                        <ToastConsumer>\r\n                            {({add}) => {\r\n                                return (\r\n                                    <span onClick={() => add(this.props.notification.message, {\r\n                                        appearance: this.props.notification.variant,\r\n                                        autoDismiss: this.props.notification.autoDismiss\r\n                                    })}>\r\n                                        {this.props.children}\r\n                                    </span>\r\n                                );\r\n                            }}\r\n                        </ToastConsumer>\r\n                    </ToastProvider>\r\n                </Aux>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Notifications;","import React from 'react';\r\nimport {Row, Col, Card, Button, Form} from 'react-bootstrap';\r\nimport chroma from 'chroma-js';\r\nimport Select from 'react-select';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Notifications from '../../../App/components/Notifications';\r\n\r\nconst colourOptions = [\r\n    { value: 'inverse', label: 'Inverse', color: '#333' },\r\n    { value: 'primary', label: 'Primary', color: '#04a9f5' },\r\n    { value: 'info', label: 'Info', color: '#3ebfea' },\r\n    { value: 'success', label: 'Success', color: '#1de9b6' },\r\n    { value: 'warning', label: 'Warning', color: '#f4c22b' },\r\n    { value: 'danger', label: 'Danger', color: '#f44236' },\r\n    { value: 'dark', label: 'Dark', color: '#c7cbce' },\r\n    { value: 'light', label: 'Light', color: '#f2f2f2' }\r\n];\r\n\r\nconst potionOption = [\r\n    { value: 'top-left', label: 'Top Left' },\r\n    { value: 'top-right', label: 'Top Right' },\r\n    { value: 'top-center', label: 'Top Center' },\r\n    { value: 'bottom-left', label: 'Bottom Left' },\r\n    { value: 'bottom-right', label: 'Bottom Right' },\r\n    { value: 'bottom-center', label: 'Bottom Center' }\r\n];\r\n\r\nconst animationOption = [\r\n    { value: 'fade', label: 'Fade' },\r\n    { value: 'flip', label: 'Flip' },\r\n    { value: 'rotate', label: 'Rotate' },\r\n    { value: 'zoom', label: 'Zoom' },\r\n    { value: 'bounce', label: 'Bounce' },\r\n    { value: 'slide', label: 'Slide' },\r\n    { value: 'roll', label: 'Roll' },\r\n    { value: 'light-speed', label: 'Light Speed' },\r\n    { value: 'jump', label: 'Jump' },\r\n    { value: 'flash', label: 'Flash' },\r\n    { value: 'head-shake', label: 'Head Shake' },\r\n    { value: 'jello', label: 'Jello' },\r\n    { value: 'pulse', label: 'Pulse' },\r\n    { value: 'rubber-band', label: 'Rubber Band' },\r\n    { value: 'shake', label: 'Shake' },\r\n    { value: 'spin', label: 'Spin' },\r\n    { value: 'swing', label: 'Swing' },\r\n    { value: 'tada', label: 'Tada' },\r\n    { value: 'wobble', label: 'Wobble' },\r\n];\r\n\r\nconst dot = (color = '#ccc') => ({\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n\r\n    ':before': {\r\n        backgroundColor: color,\r\n        borderRadius: 10,\r\n        content: '\" \"',\r\n        display: 'block',\r\n        marginRight: 8,\r\n        height: 10,\r\n        width: 10,\r\n    },\r\n});\r\n\r\nconst colourStyles = {\r\n    control: styles => ({ ...styles, backgroundColor: 'white' }),\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n        const color = chroma(data.color);\r\n        return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n                ? null\r\n                : isSelected ? data.color : isFocused ? color.alpha(0.1).css() : null,\r\n            color: isDisabled\r\n                ? '#ccc'\r\n                : isSelected\r\n                    ? chroma.contrast(color, 'white') > 2 ? 'white' : 'black'\r\n                    : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n        };\r\n    },\r\n    input: styles => ({ ...styles, ...dot() }),\r\n    placeholder: styles => ({ ...styles, ...dot() }),\r\n    singleValue: (styles, { data }) => ({ ...styles, ...dot(data.color) }),\r\n};\r\n\r\nclass AdvanceNotification extends React.Component {\r\n    state = {\r\n        variant: 'inverse',\r\n        placement: 'top-right',\r\n        autoDismiss: true,\r\n        animation: {type: 'slide', direction: 'top'},\r\n        message: 'Bootstrap Growl Turning standard Bootstrap alerts into awesome notification'\r\n    };\r\n\r\n    animationDirectionHandler = (direction) => {\r\n        this.setState({...this.state, animation: {...this.state.animation, direction: direction}})\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({message: event.target.value});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Growl Notification</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row className=\"justify-content-md-center\">\r\n                                    <Col sm={12} md={7}>\r\n                                        <Form.Group controlId=\"formPosition\">\r\n                                            <Form.Label>Position Variant</Form.Label>\r\n                                            <Select\r\n                                                defaultValue={potionOption[1]}\r\n                                                label=\"Select Position\"\r\n                                                options={potionOption}\r\n                                                onChange={({value}) => this.setState({placement: value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formColor\">\r\n                                            <Form.Label>Color Variant</Form.Label>\r\n                                            <Select\r\n                                                defaultValue={colourOptions[0]}\r\n                                                label=\"Select Variant\"\r\n                                                options={colourOptions}\r\n                                                styles={colourStyles}\r\n                                                onChange={({value}) => this.setState({variant: value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formAnimation\">\r\n                                            <Form.Label>Animation Type</Form.Label>\r\n                                            <Select\r\n                                                defaultValue={animationOption[5]}\r\n                                                label=\"Select Variant\"\r\n                                                options={animationOption}\r\n                                                onChange={({value}) => this.setState({...this.state, animation: {...this.state.animation, type: value}})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formDirectionRight\">\r\n                                            <Form.Label>Animation Direction</Form.Label>\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formDirectionRight\">\r\n                                            <div className=\"radio radio-primary d-inline\">\r\n                                                <input type=\"radio\" name=\"rdoDirection\" id=\"directionNone\" checked={this.state.animation.direction === 'none'} onChange={({value}) => this.animationDirectionHandler('none')} />\r\n                                                <label htmlFor=\"directionNone\" className=\"cr\">None</label>\r\n                                            </div>\r\n                                            <div className=\"radio radio-primary d-inline\">\r\n                                                <input type=\"radio\" name=\"rdoDirection\" id=\"directionRight\" checked={this.state.animation.direction === 'right'} onChange={({value}) => this.animationDirectionHandler('right')} />\r\n                                                <label htmlFor=\"directionRight\" className=\"cr\">Right</label>\r\n                                            </div>\r\n                                            <div className=\"radio radio-primary d-inline\">\r\n                                                <input type=\"radio\" name=\"rdoDirection\" id=\"directionLeft\" checked={this.state.animation.direction === 'left'} onChange={({value}) => this.animationDirectionHandler('left')} />\r\n                                                <label htmlFor=\"directionLeft\" className=\"cr\">Left</label>\r\n                                            </div>\r\n                                            <div className=\"radio radio-primary d-inline\">\r\n                                                <input type=\"radio\" name=\"rdoDirection\" id=\"directionTop\" checked={this.state.animation.direction === 'top'} onChange={({value}) => this.animationDirectionHandler('top')} />\r\n                                                <label htmlFor=\"directionTop\" className=\"cr\">Top</label>\r\n                                            </div>\r\n                                            <div className=\"radio radio-primary d-inline\">\r\n                                                <input type=\"radio\" name=\"rdoDirection\" id=\"directionBottom\" checked={this.state.animation.direction === 'bottom'} onChange={({value}) => this.animationDirectionHandler('bottom')} />\r\n                                                <label htmlFor=\"directionBottom\" className=\"cr\">Bottom</label>\r\n                                            </div>\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <div className=\"switch switch-primary d-inline m-r-10\">\r\n                                                <input type=\"checkbox\" id=\"icon-colored\" checked={this.state.autoDismiss} onChange={() => this.setState(prevState => {return {autoDismiss: !prevState.autoDismiss}})} />\r\n                                                <label htmlFor=\"icon-colored\" className=\"cr\" />\r\n                                            </div>\r\n                                            <Form.Label>Auto Dismiss</Form.Label>\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                            <Form.Label>Message</Form.Label>\r\n                                            <Form.Control as=\"textarea\" rows=\"3\" value={this.state.message} onChange={this.handleChange}/>\r\n                                        </Form.Group>\r\n                                        <Notifications notification={this.state}><Button>Add Notification</Button></Notifications>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdvanceNotification;\r\n"],"sourceRoot":""}